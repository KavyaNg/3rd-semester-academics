#include <stdio.h>
#include <stdbool.h>

#define N 4// Change N to the desired size of the chessboard

int board[N][N];

// Function to print the chessboard
void printBoard() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%c ", board[i][j] ? 'Q' : '-');
        }
        printf("\n");
    }
    printf("\n");
}

// Function to check if a queen can be placed at board[row][col]
bool isSafe(int row, int col) {
    // Check for queens in the same row
    for (int i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check for queens in the upper diagonal on the left
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check for queens in the lower diagonal on the left
    for (int i = row, j = col; i < N && j >= 0; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

// Function to solve the N-Queens problem using backtracking
bool solveNQueens(int col) {
    if (col == N) {
        // All queens are placed successfully
        printBoard();
        return true; // Uncomment this line if you want to find only one solution
    }

    bool res = false;
    for (int i = 0; i < N; i++) {
        if (isSafe(i, col)) {
            board[i][col] = 1; // Place queen

            // Recur to place queens in the remaining columns
            res = solveNQueens(col + 1) || res;

            // If placing queen in the current position doesn't lead to a solution,
            // then remove the queen from the current position (backtrack)
            board[i][col] = 0;
        }
    }

    return res;
}

int main() {
    // Initialize the chessboard
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            board[i][j] = 0;

    // Call the solving function starting from the first column
    solveNQueens(0);

    return 0;
}
