#include <stdio.h>

// Structure to represent each object
struct Object {
    int profit;
    int weight;
};

// Function to compare objects based on their profit-to-weight ratio
int compare(const void *a, const void *b) {
    double ratioA = ((double)(((struct Object*)a)->profit)) / (((struct Object*)a)->weight);
    double ratioB = ((double)(((struct Object*)b)->profit)) / (((struct Object*)b)->weight);
    return (ratioB - ratioA);
}

// Function to calculate the maximum profit using greedy approach
double knapsackGreedy(struct Object objects[], int n, int capacity) {
    qsort(objects, n, sizeof(struct Object), compare);

    double totalProfit = 0.0;
    int currentWeight = 0;

    for (int i = 0; i < n; i++) {
        if (currentWeight + objects[i].weight <= capacity) {
            totalProfit += objects[i].profit;
            currentWeight += objects[i].weight;
        } else {
            double remainingCapacity = capacity - currentWeight;
            totalProfit += (remainingCapacity / objects[i].weight) * objects[i].profit;
            break;
        }
    }

    return totalProfit;
}

int main() {
    // Number of objects
    int n = 7;

    // Knapsack capacity
    int capacity = 15;

    // Objects with their profits and weights
    struct Object objects[] = {
        {10, 2},
        {5, 3},
        {15, 5},
        {7, 7},
        {6, 1},
        {18, 4},
        {3, 1}
    };

    // Calculate the maximum profit using the greedy approach
    double maxProfit = knapsackGreedy(objects, n, capacity);

    // Print the result
    printf("Total profit is %.2lf\n", maxProfit);

    return 0;
}
