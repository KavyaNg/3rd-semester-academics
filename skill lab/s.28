#include <stdio.h>
#include <stdbool.h>

#define V 5 // Number of vertices in the graph

void printSolution(int path[]);

bool isSafe(int v, bool graph[V][V], int path[], int pos) {
    if (!graph[path[pos - 1]][v])
        return false;

    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

bool hamiltonCycleUtil(bool graph[V][V], int path[], int pos) {
    if (pos == V) {
        if (graph[path[pos - 1]][path[0]]) {
            printSolution(path);
            return true;
        } else {
            return false;
        }
    }

    bool foundCycle = false;

    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;

            foundCycle = hamiltonCycleUtil(graph, path, pos + 1) || foundCycle;

            path[pos] = -1;
        }
    }

    return foundCycle;
}


bool hamiltonCycle(bool graph[V][V]) {
    int path[V];
    for (int i = 0; i < V; i++)
        path[i] = -1;

    path[0] = 0;

    if (!hamiltonCycleUtil(graph, path, 1)) {
        printf("Hamiltonian cycle does not exist.\n");
        return false;
    }

    // Comment the following line to find all cycles (including duplicates)
    printf("Hamiltonian cycle exists: \n");
    return true;
}

void printSolution(int path[]) {
    for (int i = 0; i < V; i++)
        printf("%d ", path[i]);
    printf("%d ", path[0]); // Complete the cycle by adding the starting vertex
    printf("\n");
}

int main() {
    bool graph[V][V] = {
        {0, 1, 1, 1, 0},
        {1, 0, 1, 0, 1},
        {1, 1, 0, 1, 1},
        {1, 0, 1, 0, 1},
        {0, 1, 1, 1, 0}
    };

    hamiltonCycle(graph);

    return 0;
}
